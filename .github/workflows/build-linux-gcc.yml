name: Linux GCC Build

on:
  push:
    branches: [ main, develop, feature/* ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/workflows/documentation.yml'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:

env:
  BUILD_TYPE: Debug
  CMAKE_VERSION: 3.16
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

jobs:
  build-gcc:
    name: GCC ${{ matrix.gcc_version }} - ${{ matrix.build_type }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        gcc_version: [9, 10, 11, 12, 13]
        build_type: [Debug, Release]
        include:
          - gcc_version: 11
            coverage: true
            build_type: Debug
          - gcc_version: 12
            sanitizer: address
            build_type: Debug
          - gcc_version: 13
            sanitizer: thread
            build_type: Debug
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
    
    - name: Setup GCC ${{ matrix.gcc_version }}
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-${{ matrix.gcc_version }} g++-${{ matrix.gcc_version }}
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${{ matrix.gcc_version }} 100
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-${{ matrix.gcc_version }} 100
        gcc --version
        g++ --version
    
    - name: Install dependencies
      run: |
        sudo apt-get install -y \
          cmake ninja-build \
          libgtest-dev \
          libgmock-dev \
          libbenchmark-dev \
          libfmt-dev \
          doxygen graphviz
        
        # Install coverage tools if needed
        if [[ "${{ matrix.coverage }}" == "true" ]]; then
          sudo apt-get install -y gcovr lcov
        fi
    
    - name: Setup vcpkg (optional)
      if: ${{ matrix.build_type == 'Release' }}
      run: |
        git clone https://github.com/Microsoft/vcpkg.git ~/vcpkg
        ~/vcpkg/bootstrap-vcpkg.sh
        echo "VCPKG_ROOT=$HOME/vcpkg" >> $GITHUB_ENV
        echo "$HOME/vcpkg" >> $GITHUB_PATH
    
    - name: Configure CMake
      run: |
        cmake -B build \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_C_COMPILER=gcc-${{ matrix.gcc_version }} \
          -DCMAKE_CXX_COMPILER=g++-${{ matrix.gcc_version }} \
          -DBUILD_TESTS=ON \
          -DBUILD_BENCHMARKS=${{ matrix.build_type == 'Release' && 'ON' || 'OFF' }} \
          -DLOGGER_ENABLE_WARNINGS=ON \
          -DLOGGER_WARNINGS_AS_ERRORS=${{ matrix.build_type == 'Release' && 'ON' || 'OFF' }} \
          -DLOGGER_ENABLE_SANITIZERS=${{ matrix.sanitizer && 'ON' || 'OFF' }} \
          -DLOGGER_SANITIZER_TYPE=${{ matrix.sanitizer || 'none' }} \
          -DLOGGER_ENABLE_COVERAGE=${{ matrix.coverage && 'ON' || 'OFF' }} \
          -DLOGGER_STANDALONE=OFF
    
    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }} --parallel $(nproc)
    
    - name: Run tests
      run: |
        cd build
        ctest -C ${{ matrix.build_type }} \
          --timeout 300 \
          --output-on-failure \
          --parallel $(nproc) \
          -E "stress_test|benchmark"
      env:
        ASAN_OPTIONS: detect_leaks=1:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1
        TSAN_OPTIONS: halt_on_error=1:history_size=7:second_deadlock_stack=1
        UBSAN_OPTIONS: print_stacktrace=1:halt_on_error=1
    
    - name: Run stress tests
      if: ${{ matrix.build_type == 'Debug' && !matrix.sanitizer }}
      run: |
        cd build
        ctest -C ${{ matrix.build_type }} \
          --timeout 600 \
          --output-on-failure \
          -R "stress_test"
    
    - name: Run benchmarks
      if: ${{ matrix.build_type == 'Release' }}
      run: |
        cd build
        ctest -C Release \
          --timeout 300 \
          --output-on-failure \
          -R "benchmark"
    
    - name: Generate coverage report
      if: ${{ matrix.coverage }}
      run: |
        cd build
        gcovr -r .. \
          --filter '../sources/' \
          --exclude '../unittest/' \
          --exclude '../tests/' \
          --exclude '../benchmarks/' \
          --html --html-details \
          --xml coverage.xml \
          --json coverage.json \
          --print-summary \
          -o coverage.html
    
    - name: Upload coverage to Codecov
      if: ${{ matrix.coverage }}
      uses: codecov/codecov-action@v4
      with:
        file: ./build/coverage.xml
        flags: unittests,gcc${{ matrix.gcc_version }}
        name: gcc-${{ matrix.gcc_version }}-coverage
        fail_ci_if_error: false
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-gcc${{ matrix.gcc_version }}-${{ matrix.build_type }}
        path: |
          build/Testing/
          build/*.xml
          build/*.json
    
    - name: Upload coverage report
      if: ${{ matrix.coverage }}
      uses: actions/upload-artifact@v4
      with:
        name: coverage-gcc${{ matrix.gcc_version }}
        path: |
          build/coverage.*
          build/*.html