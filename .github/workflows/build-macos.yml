name: macOS Build

on:
  push:
    branches: [ main, develop, feature/* ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/workflows/documentation.yml'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:

env:
  BUILD_TYPE: Debug
  CMAKE_VERSION: 3.16

jobs:
  build-macos:
    name: macOS ${{ matrix.os }} - Xcode ${{ matrix.xcode }} - ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-12, macos-13, macos-14]
        build_type: [Debug, Release]
        include:
          - os: macos-12
            xcode: '13.4'
          - os: macos-13
            xcode: '14.3'
          - os: macos-14
            xcode: '15.0'
            arch: arm64
            sanitizer: address
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
    
    - name: Select Xcode version
      run: |
        sudo xcode-select -s /Applications/Xcode_${{ matrix.xcode }}.app/Contents/Developer
        xcodebuild -version
        clang --version
    
    - name: Install dependencies via Homebrew
      run: |
        brew update
        brew install cmake ninja googletest google-benchmark fmt doxygen graphviz
        
        # Install additional tools for code quality
        if [[ "${{ matrix.build_type }}" == "Debug" ]]; then
          brew install cppcheck lcov gcovr
        fi
    
    - name: Setup vcpkg (optional)
      if: ${{ matrix.build_type == 'Release' }}
      run: |
        git clone https://github.com/Microsoft/vcpkg.git ~/vcpkg
        ~/vcpkg/bootstrap-vcpkg.sh
        echo "VCPKG_ROOT=$HOME/vcpkg" >> $GITHUB_ENV
        echo "$HOME/vcpkg" >> $GITHUB_PATH
    
    - name: Configure CMake (Intel)
      if: ${{ matrix.arch != 'arm64' }}
      run: |
        cmake -B build \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_OSX_ARCHITECTURES=x86_64 \
          -DBUILD_TESTS=ON \
          -DBUILD_BENCHMARKS=${{ matrix.build_type == 'Release' && 'ON' || 'OFF' }} \
          -DLOGGER_ENABLE_WARNINGS=ON \
          -DLOGGER_WARNINGS_AS_ERRORS=${{ matrix.build_type == 'Release' && 'ON' || 'OFF' }} \
          -DLOGGER_ENABLE_SANITIZERS=${{ matrix.sanitizer && 'ON' || 'OFF' }} \
          -DLOGGER_SANITIZER_TYPE=${{ matrix.sanitizer || 'none' }} \
          -DLOGGER_STANDALONE=OFF
    
    - name: Configure CMake (Apple Silicon)
      if: ${{ matrix.arch == 'arm64' }}
      run: |
        cmake -B build \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_OSX_ARCHITECTURES=arm64 \
          -DBUILD_TESTS=ON \
          -DBUILD_BENCHMARKS=${{ matrix.build_type == 'Release' && 'ON' || 'OFF' }} \
          -DLOGGER_ENABLE_WARNINGS=ON \
          -DLOGGER_WARNINGS_AS_ERRORS=${{ matrix.build_type == 'Release' && 'ON' || 'OFF' }} \
          -DLOGGER_ENABLE_SANITIZERS=${{ matrix.sanitizer && 'ON' || 'OFF' }} \
          -DLOGGER_SANITIZER_TYPE=${{ matrix.sanitizer || 'none' }} \
          -DLOGGER_STANDALONE=OFF
    
    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }} --parallel $(sysctl -n hw.ncpu)
    
    - name: Run tests
      run: |
        cd build
        ctest -C ${{ matrix.build_type }} \
          --timeout 300 \
          --output-on-failure \
          --parallel $(sysctl -n hw.ncpu) \
          -E "stress_test|benchmark"
      env:
        ASAN_OPTIONS: detect_leaks=0:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1
        UBSAN_OPTIONS: print_stacktrace=1:halt_on_error=1
    
    - name: Run stress tests
      if: ${{ matrix.build_type == 'Debug' && !matrix.sanitizer }}
      run: |
        cd build
        ctest -C ${{ matrix.build_type }} \
          --timeout 600 \
          --output-on-failure \
          -R "stress_test"
    
    - name: Run benchmarks
      if: ${{ matrix.build_type == 'Release' }}
      run: |
        cd build
        ctest -C Release \
          --timeout 300 \
          --output-on-failure \
          -R "benchmark"
    
    - name: Generate coverage report
      if: ${{ matrix.build_type == 'Debug' && matrix.os == 'macos-13' }}
      run: |
        cd build
        gcovr -r .. \
          --filter '../sources/' \
          --exclude '../unittest/' \
          --exclude '../tests/' \
          --exclude '../benchmarks/' \
          --html --html-details \
          --xml coverage.xml \
          --print-summary \
          -o coverage.html
    
    - name: Upload coverage to Codecov
      if: ${{ matrix.build_type == 'Debug' && matrix.os == 'macos-13' }}
      uses: codecov/codecov-action@v3
      with:
        file: ./build/coverage.xml
        flags: unittests,macos
        name: macos-coverage
        fail_ci_if_error: false
    
    - name: Create universal binary (Release only)
      if: ${{ matrix.build_type == 'Release' && matrix.os == 'macos-14' }}
      run: |
        # Build for x86_64
        cmake -B build-x86_64 \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_OSX_ARCHITECTURES=x86_64 \
          -DBUILD_TESTS=OFF \
          -DLOGGER_STANDALONE=OFF
        cmake --build build-x86_64 --config Release
        
        # Build for arm64
        cmake -B build-arm64 \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_OSX_ARCHITECTURES=arm64 \
          -DBUILD_TESTS=OFF \
          -DLOGGER_STANDALONE=OFF
        cmake --build build-arm64 --config Release
        
        # Create universal binary
        mkdir -p universal/lib
        lipo -create \
          build-x86_64/lib/liblogger.a \
          build-arm64/lib/liblogger.a \
          -output universal/lib/liblogger.a
        
        file universal/lib/liblogger.a
        lipo -info universal/lib/liblogger.a
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.build_type }}
        path: |
          build/Testing/
          build/*.xml
    
    - name: Upload universal binary
      if: ${{ matrix.build_type == 'Release' && matrix.os == 'macos-14' }}
      uses: actions/upload-artifact@v3
      with:
        name: macos-universal-binary
        path: universal/lib/