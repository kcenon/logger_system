name: Integration Tests

on:
  push:
    branches: [ main, develop, feat/*, fix/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  integration-tests:
    name: ${{ matrix.os }} - ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [Debug, Release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            lcov \
            libgtest-dev

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install cmake ninja lcov googletest

      - name: Configure CMake
        run: |
          cmake -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DLOGGER_BUILD_TESTS=ON \
            -DLOGGER_BUILD_INTEGRATION_TESTS=ON \
            -DLOGGER_ENABLE_COVERAGE=${{ matrix.build_type == 'Debug' && 'ON' || 'OFF' }}

      - name: Build
        run: cmake --build build --config ${{ matrix.build_type }} -j $(nproc 2>/dev/null || sysctl -n hw.ncpu)

      - name: Run Integration Tests
        working-directory: build
        run: |
          ctest -C ${{ matrix.build_type }} \
            -L integration \
            --output-on-failure \
            --verbose

      - name: Generate Coverage Report (Debug only)
        if: matrix.build_type == 'Debug' && runner.os == 'Linux'
        working-directory: build
        run: |
          # Capture coverage data
          lcov --capture \
            --directory . \
            --output-file coverage.info \
            --ignore-errors mismatch \
            --rc lcov_branch_coverage=1

          # Remove system and test files
          lcov --remove coverage.info \
            '/usr/*' \
            '*/tests/*' \
            '*/integration_tests/*' \
            '*/external/*' \
            '*/build/*' \
            --output-file coverage_filtered.info \
            --ignore-errors unused \
            --rc lcov_branch_coverage=1

          # Generate HTML report
          genhtml coverage_filtered.info \
            --output-directory coverage_report \
            --title "Logger System Integration Tests Coverage" \
            --num-spaces 4 \
            --legend \
            --rc lcov_branch_coverage=1 \
            --ignore-errors source

          # Display summary
          lcov --list coverage_filtered.info

      - name: Upload Coverage Report
        if: matrix.build_type == 'Debug' && runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: integration-coverage-report-${{ matrix.os }}
          path: build/coverage_report/
          retention-days: 7

      - name: Performance Baseline Validation
        if: matrix.build_type == 'Release'
        working-directory: build
        run: |
          # Run performance tests and check against baselines
          ./integration_tests --gtest_filter="LoggerPerformanceTest.*"

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results-${{ matrix.os }}-${{ matrix.build_type }}
          path: |
            build/Testing/
            build/integration_tests.xml
          retention-days: 7

  coverage-summary:
    name: Coverage Summary
    runs-on: ubuntu-latest
    needs: integration-tests
    if: always()

    steps:
      - name: Download Coverage Reports
        uses: actions/download-artifact@v4
        with:
          pattern: integration-coverage-report-*
          merge-multiple: true
          path: coverage/

      - name: Comment Coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            let comment = '## Integration Tests Coverage Report\n\n';
            comment += 'Coverage reports have been generated and uploaded as artifacts.\n';
            comment += 'Download the artifacts to view detailed HTML coverage reports.\n';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
