name: Integration Tests

on:
  push:
    branches: [ main, feat/phase5-integration-testing ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  integration-tests-ubuntu:
    name: Integration Tests (Ubuntu)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build-type: [Debug, Release]
        compiler:
          - { name: GCC, cc: gcc, cxx: g++ }
          - { name: Clang, cc: clang, cxx: clang++ }

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install system dependencies
      run: |
        # Retry logic for apt-get to handle transient failures
        for i in 1 2 3; do
          echo "Attempt $i: Updating package list..."
          sudo apt-get update && break || {
            echo "apt-get update failed, retrying in 10 seconds..."
            sleep 10
          }
        done

        # Install dependencies with retry
        for i in 1 2 3; do
          echo "Attempt $i: Installing dependencies..."
          sudo apt-get install -y \
            cmake \
            ninja-build \
            ${{ matrix.compiler.cc }} \
            ${{ matrix.compiler.cxx }} \
            libfmt-dev \
            libspdlog-dev && break || {
            echo "apt-get install failed, retrying in 10 seconds..."
            sleep 10
          }
        done

        # Verify installation
        ${{ matrix.compiler.cc }} --version
        ${{ matrix.compiler.cxx }} --version
        cmake --version
        ninja --version
        # GTest is now fetched via CMake FetchContent - no system package needed

    - name: Checkout common_system (required dependency)
      uses: actions/checkout@v4
      with:
        repository: kcenon/common_system
        path: common_system

    - name: Checkout thread_system (required dependency)
      uses: actions/checkout@v4
      with:
        repository: kcenon/thread_system
        path: thread_system

    - name: Cache FetchContent dependencies
      uses: actions/cache@v4
      with:
        path: |
          build/_deps
        key: ${{ runner.os }}-${{ matrix.compiler.name }}-${{ matrix.build-type }}-fetchcontent-gtest-v1.14.0-${{ hashFiles('cmake/LoggerSystemDependencies.cmake', 'integration_tests/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.compiler.name }}-${{ matrix.build-type }}-fetchcontent-gtest-v1.14.0-
          ${{ runner.os }}-${{ matrix.compiler.name }}-fetchcontent-gtest-v1.14.0-

    - name: Configure CMake
      env:
        CC: ${{ matrix.compiler.cc }}
        CXX: ${{ matrix.compiler.cxx }}
      run: |
        echo "=== Build Configuration ==="
        echo "Compiler: ${{ matrix.compiler.name }}"
        echo "Build Type: ${{ matrix.build-type }}"
        echo "Common System: Required (Phase 2.2+)"
        echo "GTest: Will be fetched via FetchContent if needed"
        echo "==========================="

        cmake -B build \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
          -DLOGGER_BUILD_TESTS=ON \
          -DLOGGER_BUILD_INTEGRATION_TESTS=ON \
          -DBUILD_WITH_COMMON_SYSTEM=ON \
          -DCMAKE_PREFIX_PATH="/usr" \
          --debug-find || {
            echo "::error::CMake configuration failed"
            echo "CMake logs:"
            cat build/CMakeFiles/CMakeError.log 2>/dev/null || echo "No CMakeError.log found"
            exit 1
          }

    - name: Build
      run: |
        echo "=== Building with ${{ matrix.compiler.name }} ==="
        cmake --build build --config ${{ matrix.build-type }} --verbose || {
          echo "::error::Build failed with ${{ matrix.compiler.name }}"
          exit 1
        }

    - name: Run Integration Tests
      working-directory: build
      run: |
        echo "=== Running Integration Tests ==="
        ctest --output-on-failure -L "integration" -C ${{ matrix.build-type }}

    - name: Upload test results
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results-ubuntu-${{ matrix.compiler.name }}-${{ matrix.build-type }}
        path: build/Testing/Temporary/LastTest.log

  integration-tests-macos:
    name: Integration Tests (macOS)
    runs-on: macos-latest
    strategy:
      matrix:
        build-type: [Debug, Release]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install system dependencies
      run: |
        brew install cmake ninja fmt spdlog
        # GTest is now fetched via CMake FetchContent - no system package needed

    - name: Checkout common_system (required dependency)
      uses: actions/checkout@v4
      with:
        repository: kcenon/common_system
        path: common_system

    - name: Checkout thread_system (required dependency)
      uses: actions/checkout@v4
      with:
        repository: kcenon/thread_system
        path: thread_system

    - name: Cache FetchContent dependencies
      uses: actions/cache@v4
      with:
        path: |
          build/_deps
        key: ${{ runner.os }}-${{ matrix.build-type }}-fetchcontent-gtest-v1.14.0-${{ hashFiles('cmake/LoggerSystemDependencies.cmake', 'integration_tests/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.build-type }}-fetchcontent-gtest-v1.14.0-
          ${{ runner.os }}-fetchcontent-gtest-v1.14.0-

    - name: Configure CMake
      run: |
        echo "=== Build Configuration ==="
        echo "Build Type: ${{ matrix.build-type }}"
        echo "Common System: Required (Phase 2.2+)"
        echo "GTest: Will be fetched via FetchContent if needed"
        echo "==========================="

        cmake -B build \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
          -DLOGGER_BUILD_TESTS=ON \
          -DLOGGER_BUILD_INTEGRATION_TESTS=ON \
          -DBUILD_WITH_COMMON_SYSTEM=ON \
          --debug-find || {
            echo "::error::CMake configuration failed"
            echo "CMake logs:"
            cat build/CMakeFiles/CMakeError.log 2>/dev/null || echo "No CMakeError.log found"
            exit 1
          }

    - name: Build
      run: cmake --build build --config ${{ matrix.build-type }}

    - name: Run Integration Tests
      working-directory: build
      run: |
        echo "=== Running Integration Tests ==="
        ctest --output-on-failure -L "integration" -C ${{ matrix.build-type }}

    - name: Upload test results
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results-macos-${{ matrix.build-type }}
        path: build/Testing/Temporary/LastTest.log

  integration-tests-windows:
    name: Integration Tests (Windows)
    runs-on: windows-latest
    strategy:
      matrix:
        build-type: [Debug, Release]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Checkout common_system (required dependency)
      uses: actions/checkout@v4
      with:
        repository: kcenon/common_system
        path: common_system

    - name: Checkout thread_system (required dependency)
      uses: actions/checkout@v4
      with:
        repository: kcenon/thread_system
        path: thread_system

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '50c0cb48a0cf2f6fc5c7b2c0d2bafbe26d0a7ca2'

    - name: Configure CMake
      env:
        VCPKG_FEATURE_FLAGS: manifests
      run: |
        cmake -B build `
          -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} `
          -DLOGGER_BUILD_TESTS=ON `
          -DLOGGER_BUILD_INTEGRATION_TESTS=ON `
          -DBUILD_WITH_COMMON_SYSTEM=ON `
          -DVCPKG_MANIFEST_FEATURES="testing" `
          -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake"

    - name: Build
      run: cmake --build build --config ${{ matrix.build-type }}

    - name: Run Integration Tests
      working-directory: build
      run: |
        echo "=== Running Integration Tests ==="
        ctest --output-on-failure -L "integration" -C ${{ matrix.build-type }}

    - name: Upload test results
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results-windows-${{ matrix.build-type }}
        path: build/Testing/Temporary/LastTest.log

  coverage:
    name: Integration Test Coverage
    runs-on: ubuntu-latest
    continue-on-error: true  # Coverage is optional - don't fail workflow if it fails

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install system dependencies
      run: |
        # Retry logic for apt-get to handle transient failures
        for i in 1 2 3; do
          echo "Attempt $i: Updating package list..."
          sudo apt-get update && break || {
            echo "apt-get update failed, retrying in 10 seconds..."
            sleep 10
          }
        done

        # Install dependencies with retry
        for i in 1 2 3; do
          echo "Attempt $i: Installing dependencies..."
          sudo apt-get install -y \
            cmake \
            ninja-build \
            gcc \
            g++ \
            lcov \
            libfmt-dev \
            libspdlog-dev && break || {
            echo "apt-get install failed, retrying in 10 seconds..."
            sleep 10
          }
        done

        # Verify installation
        gcc --version
        g++ --version
        cmake --version
        ninja --version
        lcov --version
        # GTest is now fetched via CMake FetchContent - no system package needed

    - name: Checkout common_system (required dependency)
      uses: actions/checkout@v4
      with:
        repository: kcenon/common_system
        path: common_system

    - name: Checkout thread_system (required dependency)
      uses: actions/checkout@v4
      with:
        repository: kcenon/thread_system
        path: thread_system

    - name: Cache FetchContent dependencies
      uses: actions/cache@v4
      with:
        path: |
          build/_deps
        key: ${{ runner.os }}-gcc-Debug-fetchcontent-gtest-v1.14.0-${{ hashFiles('cmake/LoggerSystemDependencies.cmake', 'integration_tests/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-gcc-Debug-fetchcontent-gtest-v1.14.0-
          ${{ runner.os }}-fetchcontent-gtest-v1.14.0-

    - name: Configure CMake with Coverage
      env:
        CC: gcc
        CXX: g++
      run: |
        # Force clean build to ensure coverage flags are applied
        # CMake cache can prevent new compiler flags from being picked up
        rm -rf build

        cmake -B build \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DLOGGER_BUILD_TESTS=ON \
          -DLOGGER_BUILD_INTEGRATION_TESTS=ON \
          -DBUILD_WITH_COMMON_SYSTEM=ON \
          -DLOGGER_ENABLE_COVERAGE=ON \
          -DCMAKE_PREFIX_PATH="/usr"

    - name: Build
      run: |
        echo "=== Building with coverage instrumentation ==="
        echo "First 50 lines of verbose build to verify flags:"
        cmake --build build --verbose 2>&1 | head -50
        echo "..."
        echo "=== Running full build ==="
        cmake --build build

    - name: Generate Coverage Report
      timeout-minutes: 10  # Allow more time for coverage tests
      run: |
        cd build

        # Create coverage directory
        mkdir -p coverage/html

        # Reset coverage counters
        lcov --directory . --zerocounters

        # Run tests with extended timeout
        echo "=== Running tests for coverage (integration) ==="
        ctest --output-on-failure --timeout 300 -L "integration" || {
          echo "::warning::Tests failed or timed out during coverage run"
          exit 1
        }

        # Capture coverage data
        # --ignore-errors: Handle common lcov issues gracefully
        # - inconsistent: Function line detection issues (inline/template functions)
        # - negative: Should not occur with -fprofile-update=atomic, but handle anyway
        # - mismatch: gcov/gcc version compatibility
        echo "=== Capturing coverage data ==="
        lcov --directory . \
          --capture \
          --ignore-errors inconsistent,negative,mismatch \
          --output-file coverage/all.info || {
          echo "::error::Failed to capture coverage data"
          echo "Attempting capture with all errors ignored..."
          lcov --directory . \
            --capture \
            --ignore-errors all \
            --output-file coverage/all.info || exit 1
        }

        # Filter coverage data
        echo "=== Filtering coverage data ==="
        lcov --remove coverage/all.info \
          '/usr/*' \
          '*/vcpkg/*' \
          '*/build/*' \
          '*/tests/*' \
          '*/integration_tests/*' \
          '*/benchmarks/*' \
          '*/samples/*' \
          '*/examples/*' \
          --ignore-errors inconsistent,unused \
          --output-file coverage/all.cleaned.info || {
          echo "::error::Failed to filter coverage data"
          exit 1
        }

        # Generate HTML report
        echo "=== Generating HTML coverage report ==="
        genhtml \
          --demangle-cpp \
          --num-spaces 2 \
          --sort \
          --title "Logger System Integration Coverage" \
          --function-coverage \
          --branch-coverage \
          --ignore-errors inconsistent,unused \
          --output-directory coverage/html \
          coverage/all.cleaned.info || {
          echo "::error::Failed to generate HTML coverage report"
          exit 1
        }

        echo "=== Coverage report generated successfully ==="
        echo "Summary:"
        lcov --summary coverage/all.cleaned.info || true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: build/coverage/all.cleaned.info
        flags: integration-tests
        name: integration-tests-coverage
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  performance-tests:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '[perf]') || contains(github.event.head_commit.message, '[bench]')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install system dependencies
      run: |
        # Retry logic for apt-get to handle transient failures
        for i in 1 2 3; do
          echo "Attempt $i: Updating package list..."
          sudo apt-get update && break || {
            echo "apt-get update failed, retrying in 10 seconds..."
            sleep 10
          }
        done

        # Install dependencies with retry
        for i in 1 2 3; do
          echo "Attempt $i: Installing dependencies..."
          sudo apt-get install -y \
            cmake \
            ninja-build \
            gcc \
            g++ \
            libfmt-dev \
            libspdlog-dev && break || {
            echo "apt-get install failed, retrying in 10 seconds..."
            sleep 10
          }
        done

        # Verify installation
        gcc --version
        g++ --version
        cmake --version
        ninja --version
        # GTest is now fetched via CMake FetchContent - no system package needed

    - name: Checkout common_system (required dependency)
      uses: actions/checkout@v4
      with:
        repository: kcenon/common_system
        path: common_system

    - name: Checkout thread_system (required dependency)
      uses: actions/checkout@v4
      with:
        repository: kcenon/thread_system
        path: thread_system

    - name: Cache FetchContent dependencies
      uses: actions/cache@v4
      with:
        path: |
          build/_deps
        key: ${{ runner.os }}-gcc-Release-fetchcontent-gtest-v1.14.0-${{ hashFiles('cmake/LoggerSystemDependencies.cmake', 'integration_tests/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-gcc-Release-fetchcontent-gtest-v1.14.0-
          ${{ runner.os }}-fetchcontent-gtest-v1.14.0-

    - name: Configure CMake
      env:
        CC: gcc
        CXX: g++
        CI: true
      run: |
        cmake -B build \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DLOGGER_BUILD_TESTS=ON \
          -DLOGGER_BUILD_INTEGRATION_TESTS=ON \
          -DLOGGER_BUILD_PERFORMANCE_TESTS=ON \
          -DBUILD_WITH_COMMON_SYSTEM=ON \
          -DCMAKE_PREFIX_PATH="/usr"

    - name: Build
      run: cmake --build build

    - name: Run Performance Benchmarks
      working-directory: build
      timeout-minutes: 15
      env:
        CI: true
      run: |
        echo "=== Running Performance Benchmarks ==="
        ctest --output-on-failure -L "performance" -V

        # Run performance tests from integration_tests if they exist
        if [ -f "integration_tests" ]; then
          echo "=== Running Logger Performance Tests ==="
          ./integration_tests --gtest_filter="LoggerPerformanceTest.*" --gtest_output=json:performance-results.json || true
        fi

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-benchmark-results
        path: |
          build/performance-results.json
          build/Testing/Temporary/LastTest.log

  integration-tests-fetchcontent-pilot:
    name: FetchContent Pilot (Ubuntu/gcc/Debug)
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install system dependencies
      run: |
        # Retry logic for apt-get to handle transient failures
        for i in 1 2 3; do
          echo "Attempt $i: Updating package list..."
          sudo apt-get update && break || {
            echo "apt-get update failed, retrying in 10 seconds..."
            sleep 10
          }
        done

        # Install dependencies with retry
        for i in 1 2 3; do
          echo "Attempt $i: Installing dependencies..."
          sudo apt-get install -y \
            cmake \
            ninja-build \
            gcc \
            g++ \
            libfmt-dev \
            libspdlog-dev && break || {
            echo "apt-get install failed, retrying in 10 seconds..."
            sleep 10
          }
        done

        # Verify installation
        gcc --version
        g++ --version
        cmake --version
        ninja --version

    # NOTE: No manual checkout of common_system - testing FetchContent fallback
    # This pilot job verifies Phase A of the FetchContent migration

    - name: Cache FetchContent dependencies (including common_system)
      uses: actions/cache@v4
      with:
        path: build/_deps
        key: ${{ runner.os }}-gcc-Debug-fetchcontent-deps-${{ hashFiles('CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-gcc-Debug-fetchcontent-deps-
          ${{ runner.os }}-fetchcontent-deps-

    - name: Configure CMake (FetchContent will download common_system)
      env:
        CC: gcc
        CXX: g++
      run: |
        echo "=== FetchContent Pilot Test ==="
        echo "Phase: A (Parallel Operation)"
        echo "Goal: Verify CMake FetchContent can automatically download common_system"
        echo "Compiler: GCC"
        echo "Build Type: Debug"
        echo "==================="

        cmake -B build \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DLOGGER_BUILD_TESTS=ON \
          -DLOGGER_BUILD_INTEGRATION_TESTS=ON \
          -DBUILD_WITH_COMMON_SYSTEM=ON \
          -DCMAKE_PREFIX_PATH="/usr" \
          --debug-find || {
            echo "::error::CMake configuration failed"
            echo "CMake logs:"
            cat build/CMakeFiles/CMakeError.log 2>/dev/null || echo "No CMakeError.log found"
            cat build/CMakeFiles/CMakeOutput.log 2>/dev/null || echo "No CMakeOutput.log found"
            exit 1
          }

    - name: Build
      run: |
        echo "=== Building with FetchContent-managed dependencies ==="
        cmake --build build --config Debug --verbose || {
          echo "::error::Build failed"
          exit 1
        }

    - name: Run Integration Tests
      working-directory: build
      run: |
        echo "=== Running Integration Tests ==="
        ctest --output-on-failure -L "integration" -C Debug

    - name: Pilot Test Summary
      if: always()
      run: |
        echo "## FetchContent Pilot Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Phase A Verification**: CMake FetchContent for common_system" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ **SUCCESS**: FetchContent successfully downloaded and integrated common_system" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor build time vs. manual checkout" >> $GITHUB_STEP_SUMMARY
          echo "- Verify cache effectiveness on subsequent runs" >> $GITHUB_STEP_SUMMARY
          echo "- If stable, proceed to Phase B (rollout to all jobs)" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **FAILED**: FetchContent approach needs adjustment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Troubleshooting" >> $GITHUB_STEP_SUMMARY
          echo "- Check CMake error logs above" >> $GITHUB_STEP_SUMMARY
          echo "- Verify common_system repository accessibility" >> $GITHUB_STEP_SUMMARY
          echo "- Review FetchContent configuration in CMakeLists.txt" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload test results
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: fetchcontent-pilot-test-results
        path: |
          build/Testing/Temporary/LastTest.log
          build/CMakeFiles/CMakeError.log
          build/CMakeFiles/CMakeOutput.log
